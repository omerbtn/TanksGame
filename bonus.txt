BONUSES

1. Configuration File (config.ini with CMake Python Generation)
---------------------------------------------------------------
Description:
- A configuration file (config.ini) was added to the project to allow setting important parameters (e.g., output filename, game steps limits) without modifying the source code.
- The configuration file is parsed at build-time using a custom Python script (generate_config.py).
- This script generates a C++ header file (config_generated.h) automatically, integrating the configuration values directly into the compilation process.
- This approach allows easy and flexible adjustments of game parameters while maintaining a clean codebase.
- The generate C++ header files includes constexpr getters for the config values, so all of them are known in compile time.

How to verify:
- Modify the config.ini file located in the root project directory.
- Re-run the CMake configuration and rebuild the project.
- Observe that the generated config_generated.h file is updated with the new configuration values.

2. Automatic Unit Testing with GoogleTest
------------------------------------------
Description:
- Integrated the GoogleTest (GTest) framework into the project using CMake's FetchContent mechanism.
- Implemented a comprehensive set of unit tests that cover the core mechanics of the game:
    - Tank movements (forward, backward, wrapping through board edges)
    - Tank rotations (1/8 and 1/4 left and right)
    - Shooting and cooldown mechanisms
    - Shell movement, collision with walls, mines, tanks, and other shells
    - Mine explosions and wall destruction logic

How to verify:
- Build the project using `make`.
- Run `ctest` or execute the `tanks_game_tests` binary directly.
- All tests should execute automatically and pass successfully.

Commands (run from the project folder):
mkdir -p build
cd build
cmake ..
cmake --build .
cp tanks_game_tests ../

To run:
Option 1: ./tanks_game ../resources/game_map.txt (Or any other input file)
Option 2: ./tanks_game_tests (For the unit tests)

Summary
-------
These additions enhance the flexibility, reliability, and maintainability of the project.
The configuration file approach provides scalable parameter management without code changes, while the unit tests ensure robustness and correctness of the game mechanics.
Both features are implemented in a fully automatic and seamless manner and are ready for future extensions in upcoming assignments.
